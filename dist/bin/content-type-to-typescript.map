{"version":3,"file":"content-type-to-typescript","sources":["../../src/built-in-definitions.ts","../../src/parser.ts","../../src/generator.ts","../../src/log.ts","../../src/compile-from-space.ts","../../src/cli.ts"],"sourcesContent":["import { fromPairs, map } from 'lodash';\nimport { JSONSchema } from './types/json-schema';\n\nexport const Location: JSONSchema = {\n  title: 'Location',\n  properties: {\n    lon: {\n      type: 'number',\n      description: '',\n      additionalProperties: false,\n      required: [],\n    },\n    lat: {\n      type: 'number',\n      description: '',\n      additionalProperties: false,\n      required: [],\n    },\n  },\n  required: ['lat', 'lon'],\n  additionalProperties: false,\n};\n\nexport const AssetLink: JSONSchema = {\n  title: 'AssetLink',\n  properties: {\n    type: {\n      type: 'string',\n      description: '',\n      additionalProperties: false,\n      required: [],\n    },\n    linkType: {\n      type: 'string',\n      description: '',\n      additionalProperties: false,\n      required: [],\n    },\n    id: {\n      type: 'string',\n      additionalProperties: false,\n      required: [],\n    },\n  },\n  required: ['type', 'linkType', 'id'],\n  additionalProperties: false,\n};\n\nexport const EntryLink: JSONSchema = {\n  title: 'EntryLink',\n  properties: {\n    type: {\n      type: 'string',\n      description: '',\n      additionalProperties: false,\n      required: [],\n    },\n    linkType: {\n      type: 'string',\n      description: '',\n      additionalProperties: false,\n      required: [],\n    },\n    id: {\n      type: 'string',\n      additionalProperties: false,\n      required: [],\n    },\n  },\n  required: ['type', 'linkType', 'id'],\n  additionalProperties: false,\n};\n\nexport const buildRef = (schema: JSONSchema) => {\n  return `#/definitions/${schema.title}`;\n};\n\nexport const getByRef = (ref: string): JSONSchema => {\n  const lookup = fromPairs(map([Location, EntryLink, AssetLink], (def) => [buildRef(def), def]));\n\n  return lookup[ref];\n};\n","import { chain, deburr, trim, upperFirst } from 'lodash';\nimport { buildRef, Location } from './built-in-definitions';\nimport { ContentfulField, ContentType } from './types/contentful';\nimport { JSONSchema } from './types/json-schema';\n\nexport const toInterfaceName = (s: string, prefix: string): string => {\n  return (\n    prefix +\n    upperFirst(\n      // remove accents, umlauts, ... by their basic latin letters\n      deburr(s)\n        // replace chars which are not valid for typescript identifiers with whitespace\n        .replace(/(^\\s*[^a-zA-Z_$])|([^a-zA-Z_$\\d])/g, ' ')\n        // uppercase leading underscores followed by lowercase\n        .replace(/^_[a-z]/g, (match) => match.toUpperCase())\n        // remove non-leading underscores followed by lowercase (convert snake_case)\n        .replace(/_[a-z]/g, (match) => match.substr(1, match.length).toUpperCase())\n        // uppercase letters after digits, dollars\n        .replace(/([\\d$]+[a-zA-Z])/g, (match) => match.toUpperCase())\n        // uppercase first letter after whitespace\n        .replace(/\\s+([a-zA-Z])/g, (match) => {\n          return trim(match.toUpperCase());\n        })\n        // remove remaining whitespace\n        .replace(/\\s/g, ''),\n    )\n  );\n};\n\nfunction fieldToJsonSchema(fieldInfo: ContentfulField, prefix: string): any {\n  let result: any;\n  switch (fieldInfo.type) {\n    case 'Symbol':\n    case 'Text':\n    case 'RichText':\n    case 'Date':\n      result = {\n        type: 'string',\n      };\n      break;\n    case 'Number':\n    case 'Integer':\n      result = {\n        type: 'number',\n      };\n      break;\n    case 'Boolean':\n      result = {\n        type: 'boolean',\n      };\n      break;\n    case 'Location':\n      result = {\n        $ref: buildRef(Location),\n      };\n      break;\n    case 'Object':\n      result = {\n        type: 'object',\n      };\n      break;\n    case 'Array':\n      if (!fieldInfo.items) {\n        throw new Error('Unexpected Content Type structure.');\n      }\n      result = {\n        items: fieldToJsonSchema(fieldInfo.items, prefix),\n        type: 'array',\n      };\n      break;\n    case 'Link':\n      if (fieldInfo.linkType === 'Asset') {\n        result = {\n          tsType: `Asset`,\n        };\n      } else if (fieldInfo.linkType === 'Entry') {\n        let linkType = 'any';\n        if (fieldInfo.validations && fieldInfo.validations.length > 0) {\n          const validation = fieldInfo.validations.find((v) => {\n            return v.hasOwnProperty('linkContentType');\n          });\n          if (validation && validation.linkContentType && validation.linkContentType.length > 0) {\n            linkType = validation.linkContentType\n              .map((s: string) => {\n                return toInterfaceName(s, prefix);\n              })\n              .join(' | ');\n          }\n        }\n\n        result = {\n          tsType: `Entry<${linkType}>`,\n        };\n      } else {\n        throw new Error('Unexpected Content Type structure.');\n      }\n      break;\n    default:\n      throw new Error(`Type ${fieldInfo.type} is not yet supported`);\n  }\n\n  return result;\n}\n\nfunction transformFields(contentTypeInfo: Partial<ContentType>, prefix: string): JSONSchema {\n  const properties = chain(contentTypeInfo.fields)\n    .filter((fieldInfo) => !fieldInfo.omitted)\n    .map((fieldInfo) => [fieldInfo.id, fieldToJsonSchema(fieldInfo, prefix)])\n    .fromPairs()\n    .value();\n\n  const required = chain(contentTypeInfo.fields)\n    .filter((fieldInfo) => fieldInfo.required)\n    .map((fieldInfo) => fieldInfo.id)\n    .value();\n\n  return {\n    properties,\n    required,\n    additionalProperties: false,\n  };\n}\n\nexport function convertToJSONSchema(contentTypeInfo: ContentType, prefix: string): JSONSchema {\n  const resultSchema: JSONSchema = {\n    title: toInterfaceName(contentTypeInfo.sys.id, prefix),\n    description: contentTypeInfo.description,\n    ...transformFields(contentTypeInfo, prefix),\n  };\n\n  return resultSchema;\n}\n","import { ContentType } from 'contentful/index';\nimport { JSONSchema4 } from 'json-schema';\nimport { compile, Options } from 'json-schema-to-typescript';\nimport { chain, defaults, get, orderBy } from 'lodash';\nimport { buildRef, getByRef } from './built-in-definitions';\nimport { convertToJSONSchema } from './parser';\nimport { JSONSchema } from './types/json-schema';\n\nconst BANNER_COMMENT = `/**\n* This file was automatically generated.\n* DO NOT MODIFY IT BY HAND.\n*/`;\n\nexport async function compileFromContentTypes(\n  contentTypes: ContentType[],\n  options: Partial<Options> = {},\n  prefix: string = '',\n): Promise<string> {\n  const settings = defaults(\n    {\n      bannerComment: BANNER_COMMENT,\n    },\n    options,\n  );\n\n  const allDefinitions = includeRequiredDefinitions(\n    contentTypes.map((ct) => convertToJSONSchema(ct, prefix)),\n  );\n\n  const resultSchema = {\n    title: 'EphemeralContentfulSchemaRoot1',\n    type: 'object',\n    properties: chain(allDefinitions)\n      .map((def) => [def.title, { $ref: buildRef(def) }])\n      .fromPairs()\n      .value(),\n    definitions: chain(allDefinitions)\n      .map((def) => [def.title, def])\n      .fromPairs()\n      .value(),\n  };\n\n  const res = await compile(resultSchema as JSONSchema4, EPHEMERAL_ROOT, settings);\n\n  const contentFulTypeImport = 'import { Asset, Entry } from \\'contentful\\';';\n\n  return cleanupEphemeralRoot(contentFulTypeImport + res);\n}\n\nconst EPHEMERAL_ROOT = 'EphemeralContentfulSchemaRoot1';\n\nfunction cleanupEphemeralRoot(input: string): string {\n  return input.replace(new RegExp(`.+${EPHEMERAL_ROOT}.+[^{\\}]+(?=}).+\\n+`, 'gm'), '');\n}\n\nfunction getRefs(definition: JSONSchema): JSONSchema[] {\n  return chain(definition.properties)\n    .map((propSchema) => get(propSchema, '$ref'))\n    .compact()\n    .map((s) => getByRef(s))\n    .compact()\n    .value();\n}\n\nfunction includeRequiredDefinitions(definitions: JSONSchema[]): JSONSchema[] {\n  const requiredBuiltInDefinitions: JSONSchema[] = chain(definitions)\n    .map((def) => getRefs(def))\n    .flatten()\n    .value();\n\n  const alphabetizedDefinitions = orderBy(definitions, ['title'], ['asc']);\n\n  return alphabetizedDefinitions.concat(requiredBuiltInDefinitions);\n}\n","import chalk from 'chalk';\n\n// tslint:disable:no-console\nexport const log = (message: string) => console.log(message);\nexport const logError = (message: string) => console.error(chalk.redBright(message));\nexport const logSuccess = (message: string) => console.log(chalk.greenBright(message));\n","import { ContentType, createClient } from 'contentful';\nimport * as fs from 'fs';\nimport { compileFromContentTypes } from './content-type-to-typescript';\nimport { logError, logSuccess } from './log';\n\nasync function fetchContentTypes({\n  accessToken,\n  space,\n  environment,\n}: {\n  accessToken: string;\n  space: string;\n  environment: string;\n}): Promise<ContentType[]> {\n  try {\n    const client = createClient({\n      accessToken,\n      space,\n      environment,\n    });\n\n    let skip = 0;\n    let contentTypes: any[] = [];\n    while (true) {\n      const { items, total } = await client.getContentTypes({ skip });\n      contentTypes = contentTypes.concat(items);\n      skip += items.length;\n\n      if (skip >= total) {\n        break;\n      }\n    }\n\n    return contentTypes;\n  } catch (err) {\n    logError(err.response.data.message);\n\n    throw err;\n  }\n}\n\nasync function compile(contentTypes: ContentType[], prefix?: string): Promise<string> {\n  try {\n    const ts = await compileFromContentTypes(contentTypes, undefined, prefix);\n    return ts;\n  } catch (err) {\n    logError(err.message);\n    throw err;\n  }\n}\n\nfunction writeFile(output: string, ts: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(output, ts, (err) => {\n      if (err) {\n        logError(err.message);\n        reject(err);\n      } else {\n        logSuccess('TypeScript Definitions were successfully created!');\n        resolve();\n      }\n    });\n  });\n}\n\nexport default async function({\n  accessToken,\n  space,\n  environment,\n  output,\n  prefix,\n}: {\n  accessToken: string;\n  space: string;\n  environment: string;\n  output: string;\n  prefix?: string;\n}) {\n  const contentTypes = await fetchContentTypes({ accessToken, space, environment });\n\n  const ts = await compile(contentTypes, prefix);\n\n  await writeFile(output, ts);\n}\n","import program from 'commander';\nimport compileFromSpace from './compile-from-space';\nimport { logError } from './log';\n// tslint:disable:no-console\n\nconst ensureArgNotEmpty = (value: string, message: string): void => {\n  if (!value) {\n    logError(message);\n    process.exit(1);\n  }\n};\n\nprogram\n  .option(\n    '--access-token <accessToken>',\n    // tslint:disable-next-line:max-line-length\n    'This is the access token for this space. You can generate the token in the Contentful web app. Learn more at https://www.contentful.com/developers/docs/references/authentication/',\n  )\n  .option('--space <space>', 'This is the space ID')\n  .option('--environment <environment>', 'This is the environment, defaults to \"master\"')\n  .option('--output <output>', 'Output filename: e.g. -o ./types.ts')\n  .option('--prefix <prefix>', 'prefix used for interface names e.g. \"Contentful\"');\n\nprogram.on('--help', () => {\n  console.log('  Examples:');\n  console.log('');\n  console.log(\n    '    $ content-type-to-typescript --access-token <token> --space <space> ' +\n      '--environment <environment> --output <filename>',\n  );\n  console.log(\n    '    $ content-type-to-typescript --access-token=<token> --space=<space> ' +\n      '--environment <environment> --output=<filename>',\n  );\n  console.log('');\n});\n\nprogram.parse(process.argv);\n\n// tslint:disable:no-console\n\nensureArgNotEmpty(program.accessToken, 'Access token is missing.');\nensureArgNotEmpty(program.space, 'Space is missing.');\nensureArgNotEmpty(program.output, 'Output file path is missing.');\n\ncompileFromSpace({\n  accessToken: program.accessToken,\n  space: program.space,\n  environment: program.environment || 'master',\n  output: program.output,\n  prefix: program.prefix,\n})\n  .then(() => process.exit())\n  .catch(() => process.exit(1));\n"],"names":["fromPairs","map","upperFirst","deburr","trim","chain","defaults","compile","get","orderBy","createClient","fs.writeFile","writeFile"],"mappings":";;;;;;;;;;;;AAGO,IAAM,QAAQ,GAAe;IAClC,KAAK,EAAE,UAAU;IACjB,UAAU,EAAE;QACV,GAAG,EAAE;YACH,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,EAAE;YACf,oBAAoB,EAAE,KAAK;YAC3B,QAAQ,EAAE,EAAE;SACb;QACD,GAAG,EAAE;YACH,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,EAAE;YACf,oBAAoB,EAAE,KAAK;YAC3B,QAAQ,EAAE,EAAE;SACb;KACF;IACD,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;IACxB,oBAAoB,EAAE,KAAK;CAC5B,CAAC;AAEF,AAAO,IAAM,SAAS,GAAe;IACnC,KAAK,EAAE,WAAW;IAClB,UAAU,EAAE;QACV,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,EAAE;YACf,oBAAoB,EAAE,KAAK;YAC3B,QAAQ,EAAE,EAAE;SACb;QACD,QAAQ,EAAE;YACR,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,EAAE;YACf,oBAAoB,EAAE,KAAK;YAC3B,QAAQ,EAAE,EAAE;SACb;QACD,EAAE,EAAE;YACF,IAAI,EAAE,QAAQ;YACd,oBAAoB,EAAE,KAAK;YAC3B,QAAQ,EAAE,EAAE;SACb;KACF;IACD,QAAQ,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC;IACpC,oBAAoB,EAAE,KAAK;CAC5B,CAAC;AAEF,AAAO,IAAM,SAAS,GAAe;IACnC,KAAK,EAAE,WAAW;IAClB,UAAU,EAAE;QACV,IAAI,EAAE;YACJ,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,EAAE;YACf,oBAAoB,EAAE,KAAK;YAC3B,QAAQ,EAAE,EAAE;SACb;QACD,QAAQ,EAAE;YACR,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,EAAE;YACf,oBAAoB,EAAE,KAAK;YAC3B,QAAQ,EAAE,EAAE;SACb;QACD,EAAE,EAAE;YACF,IAAI,EAAE,QAAQ;YACd,oBAAoB,EAAE,KAAK;YAC3B,QAAQ,EAAE,EAAE;SACb;KACF;IACD,QAAQ,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC;IACpC,oBAAoB,EAAE,KAAK;CAC5B,CAAC;AAEF,AAAO,IAAM,QAAQ,GAAG,UAAC,MAAkB;IACzC,OAAO,mBAAiB,MAAM,CAAC,KAAO,CAAC;CACxC,CAAC;AAEF,AAAO,IAAM,QAAQ,GAAG,UAAC,GAAW;IAClC,IAAM,MAAM,GAAGA,gBAAS,CAACC,UAAG,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,UAAC,GAAG,IAAK,OAAA,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAA,CAAC,CAAC,CAAC;IAE/F,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;CACpB;;;;;;;;;;ACjFD,AAKO,IAAM,eAAe,GAAG,UAAC,CAAS,EAAE,MAAc;IACvD,QACE,MAAM;QACNC,iBAAU;;QAERC,aAAM,CAAC,CAAC,CAAC;aAEN,OAAO,CAAC,oCAAoC,EAAE,GAAG,CAAC;aAElD,OAAO,CAAC,UAAU,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,WAAW,EAAE,GAAA,CAAC;aAEnD,OAAO,CAAC,SAAS,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,GAAA,CAAC;aAE1E,OAAO,CAAC,mBAAmB,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,WAAW,EAAE,GAAA,CAAC;aAE5D,OAAO,CAAC,gBAAgB,EAAE,UAAC,KAAK;YAC/B,OAAOC,WAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;SAClC,CAAC;aAED,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CACtB,EACD;CACH,CAAC;AAEF,2BAA2B,SAA0B,EAAE,MAAc;IACnE,IAAI,MAAW,CAAC;IAChB,QAAQ,SAAS,CAAC,IAAI;QACpB,KAAK,QAAQ,CAAC;QACd,KAAK,MAAM,CAAC;QACZ,KAAK,UAAU,CAAC;QAChB,KAAK,MAAM;YACT,MAAM,GAAG;gBACP,IAAI,EAAE,QAAQ;aACf,CAAC;YACF,MAAM;QACR,KAAK,QAAQ,CAAC;QACd,KAAK,SAAS;YACZ,MAAM,GAAG;gBACP,IAAI,EAAE,QAAQ;aACf,CAAC;YACF,MAAM;QACR,KAAK,SAAS;YACZ,MAAM,GAAG;gBACP,IAAI,EAAE,SAAS;aAChB,CAAC;YACF,MAAM;QACR,KAAK,UAAU;YACb,MAAM,GAAG;gBACP,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC;aACzB,CAAC;YACF,MAAM;QACR,KAAK,QAAQ;YACX,MAAM,GAAG;gBACP,IAAI,EAAE,QAAQ;aACf,CAAC;YACF,MAAM;QACR,KAAK,OAAO;YACV,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;aACvD;YACD,MAAM,GAAG;gBACP,KAAK,EAAE,iBAAiB,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC;gBACjD,IAAI,EAAE,OAAO;aACd,CAAC;YACF,MAAM;QACR,KAAK,MAAM;YACT,IAAI,SAAS,CAAC,QAAQ,KAAK,OAAO,EAAE;gBAClC,MAAM,GAAG;oBACP,MAAM,EAAE,OAAO;iBAChB,CAAC;aACH;iBAAM,IAAI,SAAS,CAAC,QAAQ,KAAK,OAAO,EAAE;gBACzC,IAAI,QAAQ,GAAG,KAAK,CAAC;gBACrB,IAAI,SAAS,CAAC,WAAW,IAAI,SAAS,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7D,IAAM,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,UAAC,CAAC;wBAC9C,OAAO,CAAC,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;qBAC5C,CAAC,CAAC;oBACH,IAAI,UAAU,IAAI,UAAU,CAAC,eAAe,IAAI,UAAU,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;wBACrF,QAAQ,GAAG,UAAU,CAAC,eAAe;6BAClC,GAAG,CAAC,UAAC,CAAS;4BACb,OAAO,eAAe,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;yBACnC,CAAC;6BACD,IAAI,CAAC,KAAK,CAAC,CAAC;qBAChB;iBACF;gBAED,MAAM,GAAG;oBACP,MAAM,EAAE,WAAS,QAAQ,MAAG;iBAC7B,CAAC;aACH;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;aACvD;YACD,MAAM;QACR;YACE,MAAM,IAAI,KAAK,CAAC,UAAQ,SAAS,CAAC,IAAI,0BAAuB,CAAC,CAAC;KAClE;IAED,OAAO,MAAM,CAAC;CACf;AAED,yBAAyB,eAAqC,EAAE,MAAc;IAC5E,IAAM,UAAU,GAAGC,YAAK,CAAC,eAAe,CAAC,MAAM,CAAC;SAC7C,MAAM,CAAC,UAAC,SAAS,IAAK,OAAA,CAAC,SAAS,CAAC,OAAO,GAAA,CAAC;SACzC,GAAG,CAAC,UAAC,SAAS,IAAK,OAAA,CAAC,SAAS,CAAC,EAAE,EAAE,iBAAiB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,GAAA,CAAC;SACxE,SAAS,EAAE;SACX,KAAK,EAAE,CAAC;IAEX,IAAM,QAAQ,GAAGA,YAAK,CAAC,eAAe,CAAC,MAAM,CAAC;SAC3C,MAAM,CAAC,UAAC,SAAS,IAAK,OAAA,SAAS,CAAC,QAAQ,GAAA,CAAC;SACzC,GAAG,CAAC,UAAC,SAAS,IAAK,OAAA,SAAS,CAAC,EAAE,GAAA,CAAC;SAChC,KAAK,EAAE,CAAC;IAEX,OAAO;QACL,UAAU,YAAA;QACV,QAAQ,UAAA;QACR,oBAAoB,EAAE,KAAK;KAC5B,CAAC;CACH;AAED,6BAAoC,eAA4B,EAAE,MAAc;IAC9E,IAAM,YAAY,cAChB,KAAK,EAAE,eAAe,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,EACtD,WAAW,EAAE,eAAe,CAAC,WAAW,IACrC,eAAe,CAAC,eAAe,EAAE,MAAM,CAAC,CAC5C,CAAC;IAEF,OAAO,YAAY,CAAC;CACrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjID,AAMA,IAAM,cAAc,GAAG,gFAGpB,CAAC;AAEJ,iCACE,YAA2B,EAC3B,OAA8B,EAC9B,MAAmB;IADnB,wBAAA,EAAA,YAA8B;IAC9B,uBAAA,EAAA,WAAmB;;;;;;oBAEb,QAAQ,GAAGC,eAAQ,CACvB;wBACE,aAAa,EAAE,cAAc;qBAC9B,EACD,OAAO,CACR,CAAC;oBAEI,cAAc,GAAG,0BAA0B,CAC/C,YAAY,CAAC,GAAG,CAAC,UAAC,EAAE,IAAK,OAAA,mBAAmB,CAAC,EAAE,EAAE,MAAM,CAAC,GAAA,CAAC,CAC1D,CAAC;oBAEI,YAAY,GAAG;wBACnB,KAAK,EAAE,gCAAgC;wBACvC,IAAI,EAAE,QAAQ;wBACd,UAAU,EAAED,YAAK,CAAC,cAAc,CAAC;6BAC9B,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,GAAA,CAAC;6BAClD,SAAS,EAAE;6BACX,KAAK,EAAE;wBACV,WAAW,EAAEA,YAAK,CAAC,cAAc,CAAC;6BAC/B,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,GAAA,CAAC;6BAC9B,SAAS,EAAE;6BACX,KAAK,EAAE;qBACX,CAAC;oBAEU,qBAAME,8BAAO,CAAC,YAA2B,EAAE,cAAc,EAAE,QAAQ,CAAC,EAAA;;oBAA1E,GAAG,GAAG,SAAoE;oBAE1E,oBAAoB,GAAG,8CAA8C,CAAC;oBAE5E,sBAAO,oBAAoB,CAAC,oBAAoB,GAAG,GAAG,CAAC,EAAC;;;;CACzD;AAED,IAAM,cAAc,GAAG,gCAAgC,CAAC;AAExD,8BAA8B,KAAa;IACzC,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,OAAK,cAAc,uBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;CACtF;AAED,iBAAiB,UAAsB;IACrC,OAAOF,YAAK,CAAC,UAAU,CAAC,UAAU,CAAC;SAChC,GAAG,CAAC,UAAC,UAAU,IAAK,OAAAG,UAAG,CAAC,UAAU,EAAE,MAAM,CAAC,GAAA,CAAC;SAC5C,OAAO,EAAE;SACT,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,QAAQ,CAAC,CAAC,CAAC,GAAA,CAAC;SACvB,OAAO,EAAE;SACT,KAAK,EAAE,CAAC;CACZ;AAED,oCAAoC,WAAyB;IAC3D,IAAM,0BAA0B,GAAiBH,YAAK,CAAC,WAAW,CAAC;SAChE,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,GAAA,CAAC;SAC1B,OAAO,EAAE;SACT,KAAK,EAAE,CAAC;IAEX,IAAM,uBAAuB,GAAGI,cAAO,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEzE,OAAO,uBAAuB,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;CACnE;;ACvED;AACA,AAA6D;AAC7D,AAAO,IAAM,QAAQ,GAAG,UAAC,OAAe,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,GAAA,CAAC;AACrF,AAAO,IAAM,UAAU,GAAG,UAAC,OAAe,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLtF,AAKA,2BAAiC,EAQhC;QAPC,4BAAW,EACX,gBAAK,EACL,4BAAW;;;;;;;oBAOH,MAAM,GAAGC,uBAAY,CAAC;wBAC1B,WAAW,aAAA;wBACX,KAAK,OAAA;wBACL,WAAW,aAAA;qBACZ,CAAC,CAAC;oBAEC,IAAI,GAAG,CAAC,CAAC;oBACT,YAAY,GAAU,EAAE,CAAC;;;;oBAEF,qBAAM,MAAM,CAAC,eAAe,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC,EAAA;;oBAAzD,KAAmB,SAAsC,EAAvD,KAAK,WAAA,EAAE,KAAK,WAAA;oBACpB,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC1C,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC;oBAErB,IAAI,IAAI,IAAI,KAAK,EAAE;wBACjB,wBAAM;qBACP;;wBAGH,sBAAO,YAAY,EAAC;;;oBAEpB,QAAQ,CAAC,KAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAEpC,MAAM,KAAG,CAAC;;;;;CAEb;AAED,mBAAuB,YAA2B,EAAE,MAAe;;;;;;;oBAEpD,qBAAM,uBAAuB,CAAC,YAAY,EAAE,SAAS,EAAE,MAAM,CAAC,EAAA;;oBAAnE,EAAE,GAAG,SAA8D;oBACzE,sBAAO,EAAE,EAAC;;;oBAEV,QAAQ,CAAC,KAAG,CAAC,OAAO,CAAC,CAAC;oBACtB,MAAM,KAAG,CAAC;;;;;CAEb;AAED,qBAAmB,MAAc,EAAE,EAAU;IAC3C,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjCC,YAAY,CAAC,MAAM,EAAE,EAAE,EAAE,UAAC,GAAG;YAC3B,IAAI,GAAG,EAAE;gBACP,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACtB,MAAM,CAAC,GAAG,CAAC,CAAC;aACb;iBAAM;gBACL,UAAU,CAAC,mDAAmD,CAAC,CAAC;gBAChE,OAAO,EAAE,CAAC;aACX;SACF,CAAC,CAAC;KACJ,CAAC,CAAC;CACJ;AAED,2BAA8B,EAY7B;QAXC,4BAAW,EACX,gBAAK,EACL,4BAAW,EACX,kBAAM,EACN,kBAAM;;;;;wBAQe,qBAAM,iBAAiB,CAAC,EAAE,WAAW,aAAA,EAAE,KAAK,OAAA,EAAE,WAAW,aAAA,EAAE,CAAC,EAAA;;oBAA3E,YAAY,GAAG,SAA4D;oBAEtE,qBAAMJ,SAAO,CAAC,YAAY,EAAE,MAAM,CAAC,EAAA;;oBAAxC,EAAE,GAAG,SAAmC;oBAE9C,qBAAMK,WAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAA;;oBAA3B,SAA2B,CAAC;;;;;CAC7B;;AChFD;AAEA,IAAM,iBAAiB,GAAG,UAAC,KAAa,EAAE,OAAe;IACvD,IAAI,CAAC,KAAK,EAAE;QACV,QAAQ,CAAC,OAAO,CAAC,CAAC;QAClB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;CACF,CAAC;AAEF,OAAO;KACJ,MAAM,CACL,8BAA8B;;AAE9B,oLAAoL,CACrL;KACA,MAAM,CAAC,iBAAiB,EAAE,sBAAsB,CAAC;KACjD,MAAM,CAAC,6BAA6B,EAAE,+CAA+C,CAAC;KACtF,MAAM,CAAC,mBAAmB,EAAE,qCAAqC,CAAC;KAClE,MAAM,CAAC,mBAAmB,EAAE,mDAAmD,CAAC,CAAC;AAEpF,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE;IACnB,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC3B,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAChB,OAAO,CAAC,GAAG,CACT,0EAA0E;QACxE,iDAAiD,CACpD,CAAC;IACF,OAAO,CAAC,GAAG,CACT,0EAA0E;QACxE,iDAAiD,CACpD,CAAC;IACF,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;CACjB,CAAC,CAAC;AAEH,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;AAI5B,iBAAiB,CAAC,OAAO,CAAC,WAAW,EAAE,0BAA0B,CAAC,CAAC;AACnE,iBAAiB,CAAC,OAAO,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC;AACtD,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,8BAA8B,CAAC,CAAC;AAElE,gBAAgB,CAAC;IACf,WAAW,EAAE,OAAO,CAAC,WAAW;IAChC,KAAK,EAAE,OAAO,CAAC,KAAK;IACpB,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,QAAQ;IAC5C,MAAM,EAAE,OAAO,CAAC,MAAM;IACtB,MAAM,EAAE,OAAO,CAAC,MAAM;CACvB,CAAC;KACC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,IAAI,EAAE,GAAA,CAAC;KAC1B,KAAK,CAAC,cAAM,OAAA,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC"}